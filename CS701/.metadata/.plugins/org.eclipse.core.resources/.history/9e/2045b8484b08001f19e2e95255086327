//#include <stdio.h>
//#include "system.h"
//#include "altera_avalon_pio_regs.h"
//#include <stdint.h>
//
//
//int key;
//int button[] = {0,0,0};
//
//
//int main() {
//	int edge, edge1, edge2, edge3, toggle1 = 0, toggle2 = 0, toggle3 = 0, state = 0;
//	int original = 0; //Flag for the sound to not be doubled by the DP_DAC. original = 1 for original. Original = 0 for going through the component
//	while (1) {
//		key = ~IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
//		//printf("State num %d\n", state);
//		if ((key & 0b01) && !edge) {
//			if (state > 4) {
//				state = 4;
//			} else {
//				state = 9;
//			}
//		} else if ((key & 0b10) && !edge1) {
//			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x01);
//			toggle2 = !toggle2;
//			if (toggle2 == 1) {
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1000000);
//			} else {
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1020000);
//			}
//		} else if ((key & 0b100) && !edge2) {
//			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
//			toggle1 = !toggle1;
//			if (toggle1 == 1) {
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1010000);
//			} else {
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1030000);
//			}
////		} else if ((key & 0b1000) && !edge3) {
////			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
////			toggle3 = !toggle3;
////			original = 1;
////			if (toggle3 == 1) {
////				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0120000);
////				if (original == 1) {
////					IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
////					IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0130000);
////					original = 0;
////				}
////			} else {
////				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0320000);
////				if (original == 0) {
////					IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
////					IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0330000);
////				}
////			}
//		} else {
//			switch (state) {
//			case 9:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x01);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1020000);
//				state = 8;
//				break;
//			case 8:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x01);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1030000);
//				state = 7;
//				break;
//			case 7:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0320000);
//				state = 6;
//				break;
//			case 6:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0330000);
//				state = 5;
//				break;
//			case 4:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0000000);
//				state = 3;
//				break;
//			case 3:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x00);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xa0010000);
//				state = 2;
//				break;
//			case 2:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x01);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1000000);
//				state = 1;
//				break;
//			case 1:
//				IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE, 0x01);
//				IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE, 0xb1010000);
//				state = 0;
//				break;
//			}
//		}
//		edge = (key & 0b01);
//		edge1 = (key & 0b10);
//		edge2 = (key & 0b100);
//		edge3 = (key & 0b1000);
//	}
//}

#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <stdint.h>
#include <alt_types.h>
#include <sys/alt_irq.h>


#define MUTED 0
#define UNMUTED 0

int button_array[4] = {0,0,0,0};
int keys = 0;

// void button_isr(void* context, alt_u32 id){
// 	printf("In the button ISR\n\r");
// 	int* temp = (int*) context;
// 	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BTN_PIO_BASE);
// 	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BTN_PIO_BASE, 0);

// 	if (keys == 0x1){
// 		button_array[0] = 1;
// 	} else if(keys == 0x2){
// 		button_array[1] = 1;
// 	} else if(keys == 0x4){
// 		button_array[2] = 1;
// 	}
// 	else if(keys == 0x8){
// 		button_array[3] = 1;
// 	}
// 	return;
// }


int main() {
	printf("In the button ISR\n\r");
	int state = 9;

	int rchan = UNMUTED;
	int lchan = UNMUTED;




	// Clear edge capture register
	//IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0);
	//IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xF);
	//void *context = (void*)&keys;
	//alt_ic_isr_register(1, KEY_IRQ, context, button_isr, 0);

	while(1){
		//IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0);
			keys = !IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
			if (keys == 0x1){
				button_array[0] = 1;
			} else if(keys == 0x2){
				button_array[1] = 1;
			} else if(keys == 0x4){
				button_array[2] = 1;
			}
			else if(keys == 0x8){
				button_array[3] = 1;
			}


		//printf("%d\n", keys);
		printf("%d, %d, %d, %d\n", button_array[0], button_array[1], button_array[2], button_array[3]);

		printf("%d\n", !IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE));

		//printf("SWITCH: %d | BUTTON: %d\n", IORD_ALTERA_AVALON_PIO_DATA(SW_PIO_BASE), IORD_ALTERA_AVALON_PIO_DATA(BTN_PIO_BASE));

		//IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, keys);

		if (button_array[0] == 1) {
			// Reset stuff now
			if (state > 4) {
				state = 4;
				button_array[0] = 0;
				printf("turning off \n\r");
			}
		}


		// Enable DAC channel 0
		if (state == 9) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1020000);
			state = 8;

		// Enable DAC Channel 1
		}else if (state == 8) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1030000);
			state = 7;

		// Enable ADC Channel 0
		} else if (state == 7) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x00);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xa0320000);
			state = 6;
		// Enable ADC Channel 1
		} else if (state == 6) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x00);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xa0330000);
			state = 5;

		}
		//Hanging State
		else if (state == 5) {

				if ((button_array[1] = 1)) {
					//printf("In left channel button\n\r");
					if (lchan == UNMUTED){
						IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0x01);
						IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1010000);
						lchan = MUTED;
						//Action completed;
						button_array[1] = 0;
						//printf("Left Channel Muted\n\r");
					} else{
						IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
						IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1030000);
						lchan = UNMUTED;
						//Action completed;
						button_array[1] = 0;
						//printf("Left Channel Unmuted\n\r");
					}
				}
				// Right
				else if((button_array[2] = 1)){
					//printf("In right channel button\n\r");
					if (rchan == UNMUTED){
						IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
						IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1000000);
						rchan = MUTED;
						//Action completed;
						button_array[2] = 0;
						//printf("Right Channel Muted\n\r");
					} else {
						IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
						IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1020000);
						rchan = UNMUTED;
						//Action completed;
						button_array[2] = 0;
						//printf("Right Channel Unmuted\n\r");
					}
				}
		// Disable ADC Channel 0
		} else if (state == 4) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x00);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xa0000000);
			state = 3;
		// Disable ADC Channel 1
		}else if (state == 3) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x00);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xa0010000);
			state = 2;
		// Disable dac 0
		}else if (state == 2) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1000000);
			state = 1;
		// Disable DAC 1
		}else if (state == 1) {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0xb1010000);
			state = 0;
		} else {
			IOWR_ALTERA_AVALON_PIO_DATA(ADDR_BASE,0x01);
			IOWR_ALTERA_AVALON_PIO_DATA(SEND_BASE,0x00000000);
		}
	}

}
